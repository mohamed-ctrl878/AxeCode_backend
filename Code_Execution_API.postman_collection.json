{
    "info": {
        "name": "Code Execution API",
        "description": "Collection for testing the C++ code execution endpoint",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "variable": [
        {
            "key": "base_url",
            "value": "http://localhost:1337",
            "type": "string"
        }
    ],
    "item": [
        {
            "name": "Example 1: Simple Addition",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int add(int a, int b) { return a + b; }\",\n  \"functionName\": \"add\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [5, 3],\n      \"inputTypes\": [\"int\", \"int\"]\n    },\n    {\n      \"inputs\": [10, 20],\n      \"inputTypes\": [\"int\", \"int\"]\n    }\n  ],\n  \"expected\": [8, 30]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 2: Vector Sum",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int sum(vector<int>& nums) { int total = 0; for(int num : nums) total += num; return total; }\",\n  \"functionName\": \"sum\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [[1, 2, 3, 4, 5]],\n      \"inputTypes\": [\"vector<int>\"]\n    }\n  ],\n  \"expected\": [15]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 3: String Reverse",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"string reverse(string s) { reverse(s.begin(), s.end()); return s; }\",\n  \"functionName\": \"reverse\",\n  \"functionReturnType\": \"string\",\n  \"testCases\": [\n    {\n      \"inputs\": [\"hello\"],\n      \"inputTypes\": [\"string\"]\n    }\n  ],\n  \"expected\": [\"olleh\"]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 4: Find Maximum",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int findMax(vector<int>& nums) { if(nums.empty()) return -1; return *max_element(nums.begin(), nums.end()); }\",\n  \"functionName\": \"findMax\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [[3, 7, 2, 9, 1]],\n      \"inputTypes\": [\"vector<int>\"]\n    }\n  ],\n  \"expected\": [9]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 5: Palindrome Check",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"bool isPalindrome(string s) { string cleaned; for(char c : s) { if(isalnum(c)) cleaned += tolower(c); } string reversed = cleaned; reverse(reversed.begin(), reversed.end()); return cleaned == reversed; }\",\n  \"functionName\": \"isPalindrome\",\n  \"functionReturnType\": \"bool\",\n  \"testCases\": [\n    {\n      \"inputs\": [\"A man, a plan, a canal: Panama\"],\n      \"inputTypes\": [\"string\"]\n    }\n  ],\n  \"expected\": [true]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 6: Two Sum",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"vector<int> twoSum(vector<int>& nums, int target) { unordered_map<int, int> seen; for(int i = 0; i < nums.size(); i++) { int complement = target - nums[i]; if(seen.find(complement) != seen.end()) { return {seen[complement], i}; } seen[nums[i]] = i; } return {}; }\",\n  \"functionName\": \"twoSum\",\n  \"functionReturnType\": \"vector<int>\",\n  \"testCases\": [\n    {\n      \"inputs\": [[2, 7, 11, 15], 9],\n      \"inputTypes\": [\"vector<int>\", \"int\"]\n    }\n  ],\n  \"expected\": [[0, 1]]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Example 7: Fibonacci",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int fib(int n) { if(n <= 1) return n; int prev = 0, curr = 1; for(int i = 2; i <= n; i++) { int next = prev + curr; prev = curr; curr = next; } return curr; }\",\n  \"functionName\": \"fib\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [6],\n      \"inputTypes\": [\"int\"]\n    }\n  ],\n  \"expected\": [8]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Error Test 1: Invalid Language",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"python\",\n  \"code\": \"print('hello')\",\n  \"functionName\": \"main\",\n  \"functionReturnType\": \"void\",\n  \"testCases\": [],\n  \"expected\": []\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Error Test 2: Empty Code",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"\",\n  \"functionName\": \"test\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [],\n  \"expected\": []\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Error Test 3: Mismatched Arrays",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int add(int a, int b) { return a + b; }\",\n  \"functionName\": \"add\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [1, 2],\n      \"inputTypes\": [\"int\", \"int\"]\n    }\n  ],\n  \"expected\": [3, 5]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        },
        {
            "name": "Error Test 4: Invalid Input Type",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "body": {
                    "mode": "raw",
                    "raw": "{\n  \"language\": \"cpp\",\n  \"code\": \"int test(int a) { return a; }\",\n  \"functionName\": \"test\",\n  \"functionReturnType\": \"int\",\n  \"testCases\": [\n    {\n      \"inputs\": [\"not_a_number\"],\n      \"inputTypes\": [\"int\"]\n    }\n  ],\n  \"expected\": [0]\n}"
                },
                "url": {
                    "raw": "{{base_url}}/api/code-execution",
                    "host": [
                        "{{base_url}}"
                    ],
                    "path": [
                        "api",
                        "code-execution"
                    ]
                }
            }
        }
    ]
}